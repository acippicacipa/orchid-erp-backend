# Generated by Django 5.2.6 on 2025-10-13 06:23

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0002_initial'),
        ('inventory', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomerGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('group_type', models.CharField(choices=[('MBO', 'MBO (Margin 25%)'), ('REGULAR', 'Regular (Margin 10%)'), ('WHOLESALER', 'Wholesaler'), ('RETAIL', 'Retail'), ('VIP', 'VIP Customer')], default='REGULAR', max_length=20)),
                ('description', models.TextField(blank=True, null=True)),
                ('margin_percentage', models.DecimalField(decimal_places=2, default=10.0, help_text='Margin percentage over purchase price', max_digits=5)),
                ('default_discount_percentage', models.DecimalField(decimal_places=2, default=0.0, help_text='Default discount percentage for this group', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('minimum_order_amount', models.DecimalField(decimal_places=2, default=0.0, help_text='Minimum order amount to qualify for group pricing', max_digits=15)),
                ('is_active', models.BooleanField(default=True)),
                ('priority', models.IntegerField(default=1, help_text='Priority for discount calculation (1=highest)')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Customer Group',
                'verbose_name_plural': 'Customer Groups',
                'db_table': 'sales_customer_groups',
                'ordering': ['priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(db_index=True, help_text='Customer name', max_length=255)),
                ('customer_id', models.CharField(blank=True, help_text='Unique customer ID', max_length=50, null=True, unique=True)),
                ('email', models.EmailField(blank=True, help_text='Customer email address', max_length=254, null=True)),
                ('phone', models.CharField(blank=True, help_text='Customer phone number', max_length=20, null=True)),
                ('mobile', models.CharField(blank=True, help_text='Customer mobile number', max_length=20, null=True)),
                ('address_line_1', models.CharField(blank=True, help_text='Address line 1', max_length=255, null=True)),
                ('address_line_2', models.CharField(blank=True, help_text='Address line 2', max_length=255, null=True)),
                ('city', models.CharField(blank=True, help_text='City', max_length=100, null=True)),
                ('state', models.CharField(blank=True, help_text='State/Province', max_length=100, null=True)),
                ('postal_code', models.CharField(blank=True, help_text='Postal code', max_length=20, null=True)),
                ('country', models.CharField(default='Indonesia', help_text='Country', max_length=100)),
                ('contact_person', models.CharField(blank=True, help_text='Contact person name', max_length=255, null=True)),
                ('company_name', models.CharField(blank=True, help_text='Company name', max_length=255, null=True)),
                ('tax_id', models.CharField(blank=True, help_text='Tax ID/NPWP', max_length=50, null=True)),
                ('credit_limit', models.DecimalField(decimal_places=2, default=0.0, help_text='Credit limit in IDR', max_digits=15)),
                ('payment_terms', models.CharField(default='Net 30 days', help_text='Payment terms', max_length=100)),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=0.0, help_text='Default discount percentage', max_digits=5)),
                ('is_active', models.BooleanField(default=True, help_text='Is customer active')),
                ('notes', models.TextField(blank=True, help_text='Additional notes', null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated_by', to=settings.AUTH_USER_MODEL)),
                ('customer_group', models.ForeignKey(blank=True, help_text='Customer group for pricing and discounts', null=True, on_delete=django.db.models.deletion.SET_NULL, to='sales.customergroup')),
            ],
            options={
                'verbose_name': 'Customer',
                'verbose_name_plural': 'Customers',
                'db_table': 'sales_customers',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DownPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('down_payment_number', models.CharField(blank=True, db_index=True, max_length=50, null=True, unique=True)),
                ('payment_date', models.DateField(auto_now_add=True)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Down payment amount in IDR', max_digits=15)),
                ('remaining_amount', models.DecimalField(decimal_places=2, help_text='Remaining amount available for use', max_digits=15)),
                ('payment_method', models.CharField(choices=[('CASH', 'Cash'), ('BANK_TRANSFER', 'Bank Transfer'), ('CREDIT_CARD', 'Credit Card'), ('DEBIT_CARD', 'Debit Card'), ('E_WALLET', 'E-Wallet'), ('CHECK', 'Check'), ('OTHER', 'Other')], max_length=20)),
                ('reference_number', models.CharField(blank=True, help_text='Payment reference number', max_length=100, null=True)),
                ('transaction_id', models.CharField(blank=True, help_text='Transaction ID', max_length=100, null=True)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('USED', 'Used'), ('REFUNDED', 'Refunded'), ('EXPIRED', 'Expired')], default='ACTIVE', max_length=20)),
                ('expiry_date', models.DateField(blank=True, help_text='Expiry date for down payment', null=True)),
                ('notes', models.TextField(blank=True, help_text='Down payment notes', null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='down_payments', to='sales.customer')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Down Payment',
                'verbose_name_plural': 'Down Payments',
                'db_table': 'sales_down_payments',
                'ordering': ['-payment_date'],
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('invoice_date', models.DateField(auto_now_add=True)),
                ('due_date', models.DateField(help_text='Payment due date')),
                ('invoice_number', models.CharField(blank=True, db_index=True, max_length=50, null=True, unique=True)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SENT', 'Sent'), ('PARTIAL', 'Partially Paid'), ('PAID', 'Paid'), ('OVERDUE', 'Overdue'), ('CANCELLED', 'Cancelled')], default='DRAFT', max_length=20)),
                ('subtotal', models.DecimalField(decimal_places=2, help_text='Subtotal in IDR', max_digits=15)),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0.0, help_text='Discount amount in IDR', max_digits=15)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=0.0, help_text='Tax amount in IDR', max_digits=15)),
                ('total_amount', models.DecimalField(decimal_places=2, help_text='Total amount in IDR', max_digits=15)),
                ('amount_paid', models.DecimalField(decimal_places=2, default=0.0, help_text='Amount paid in IDR', max_digits=15)),
                ('balance_due', models.DecimalField(decimal_places=2, help_text='Balance due in IDR', max_digits=15)),
                ('payment_terms', models.CharField(default='Net 30 days', max_length=100)),
                ('notes', models.TextField(blank=True, help_text='Invoice notes', null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='invoices', to='sales.customer')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Invoice',
                'verbose_name_plural': 'Invoices',
                'db_table': 'sales_invoices',
                'ordering': ['-invoice_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('payment_date', models.DateField(auto_now_add=True)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Payment amount in IDR', max_digits=15)),
                ('payment_method', models.CharField(choices=[('CASH', 'Cash'), ('BANK_TRANSFER', 'Bank Transfer'), ('CREDIT_CARD', 'Credit Card'), ('DEBIT_CARD', 'Debit Card'), ('E_WALLET', 'E-Wallet'), ('CHECK', 'Check'), ('OTHER', 'Other')], max_length=20)),
                ('reference_number', models.CharField(blank=True, help_text='Payment reference number', max_length=100, null=True)),
                ('transaction_id', models.CharField(blank=True, help_text='Transaction ID', max_length=100, null=True)),
                ('notes', models.TextField(blank=True, help_text='Payment notes', null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='payments', to='sales.invoice')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
                'db_table': 'sales_payments',
                'ordering': ['-payment_date'],
            },
        ),
        migrations.CreateModel(
            name='ProductDiscount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Discount name/description', max_length=255)),
                ('discount_type', models.CharField(choices=[('PERCENTAGE', 'Percentage'), ('FIXED_AMOUNT', 'Fixed Amount'), ('SPECIAL_PRICE', 'Special Price')], default='PERCENTAGE', max_length=20)),
                ('discount_percentage', models.DecimalField(blank=True, decimal_places=2, default=0.0, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('discount_amount', models.DecimalField(blank=True, decimal_places=2, default=0.0, help_text='Fixed discount amount in IDR', max_digits=15, null=True)),
                ('special_price', models.DecimalField(blank=True, decimal_places=2, help_text='Special selling price in IDR', max_digits=15, null=True)),
                ('start_date', models.DateField(help_text='Discount start date')),
                ('end_date', models.DateField(help_text='Discount end date')),
                ('minimum_quantity', models.DecimalField(decimal_places=2, default=1.0, help_text='Minimum quantity to qualify for discount', max_digits=10)),
                ('maximum_quantity', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum quantity for discount (optional)', max_digits=10, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('priority', models.IntegerField(default=1, help_text='Priority for discount calculation (1=highest)')),
                ('applicable_customer_groups', models.ManyToManyField(blank=True, help_text='Leave empty to apply to all customer groups', to='sales.customergroup')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_discounts', to='inventory.product')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Product Discount',
                'verbose_name_plural': 'Product Discounts',
                'db_table': 'sales_product_discounts',
                'ordering': ['priority', '-start_date'],
            },
        ),
        migrations.CreateModel(
            name='QuantityDiscount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Quantity discount name', max_length=255)),
                ('min_quantity', models.DecimalField(decimal_places=2, help_text='Minimum quantity for this tier', max_digits=10)),
                ('max_quantity', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum quantity for this tier (optional)', max_digits=10, null=True)),
                ('discount_percentage', models.DecimalField(decimal_places=2, help_text='Discount percentage for this quantity tier', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('is_active', models.BooleanField(default=True)),
                ('priority', models.IntegerField(default=1, help_text='Priority for discount calculation (1=highest)')),
                ('applicable_customer_groups', models.ManyToManyField(blank=True, help_text='Leave empty to apply to all customer groups', to='sales.customergroup')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quantity_discounts', to='inventory.product')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Quantity Discount',
                'verbose_name_plural': 'Quantity Discounts',
                'db_table': 'sales_quantity_discounts',
                'ordering': ['product', 'min_quantity'],
            },
        ),
        migrations.CreateModel(
            name='SalesOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order_date', models.DateField(auto_now_add=True)),
                ('due_date', models.DateField(blank=True, help_text='Expected delivery date', null=True)),
                ('order_number', models.CharField(blank=True, db_index=True, max_length=50, null=True, unique=True)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('PENDING', 'Pending'), ('CONFIRMED', 'Confirmed'), ('PROCESSING', 'Processing'), ('SHIPPED', 'Shipped'), ('DELIVERED', 'Delivered'), ('CANCELLED', 'Cancelled')], default='DRAFT', max_length=20)),
                ('subtotal', models.DecimalField(decimal_places=2, default=0.0, help_text='Subtotal in IDR', max_digits=15)),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=0.0, help_text='Discount percentage', max_digits=5)),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0.0, help_text='Discount amount in IDR', max_digits=15)),
                ('tax_percentage', models.DecimalField(decimal_places=2, default=11.0, help_text='Tax percentage (PPN)', max_digits=5)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=0.0, help_text='Tax amount in IDR', max_digits=15)),
                ('shipping_cost', models.DecimalField(decimal_places=2, default=0.0, help_text='Shipping cost in IDR', max_digits=15)),
                ('total_amount', models.DecimalField(decimal_places=2, default=0.0, help_text='Total amount in IDR', max_digits=15)),
                ('shipping_address_line_1', models.CharField(blank=True, max_length=255, null=True)),
                ('shipping_address_line_2', models.CharField(blank=True, max_length=255, null=True)),
                ('shipping_city', models.CharField(blank=True, max_length=100, null=True)),
                ('shipping_state', models.CharField(blank=True, max_length=100, null=True)),
                ('shipping_postal_code', models.CharField(blank=True, max_length=20, null=True)),
                ('billing_address_line_1', models.CharField(blank=True, max_length=255, null=True)),
                ('billing_address_line_2', models.CharField(blank=True, max_length=255, null=True)),
                ('billing_city', models.CharField(blank=True, max_length=100, null=True)),
                ('billing_state', models.CharField(blank=True, max_length=100, null=True)),
                ('billing_postal_code', models.CharField(blank=True, max_length=20, null=True)),
                ('notes', models.TextField(blank=True, help_text='Order notes', null=True)),
                ('internal_notes', models.TextField(blank=True, help_text='Internal notes', null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sales_orders', to='sales.customer')),
                ('sales_person', models.ForeignKey(blank=True, help_text='Sales person', null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.userprofile')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Sales Order',
                'verbose_name_plural': 'Sales Orders',
                'db_table': 'sales_orders',
                'ordering': ['-order_date', '-created_at'],
            },
        ),
        migrations.AddField(
            model_name='invoice',
            name='sales_order',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='invoice', to='sales.salesorder'),
        ),
        migrations.CreateModel(
            name='DownPaymentUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('amount_used', models.DecimalField(decimal_places=2, help_text='Amount used from down payment', max_digits=15)),
                ('usage_date', models.DateField(auto_now_add=True)),
                ('notes', models.TextField(blank=True, help_text='Usage notes', null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('down_payment', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='usages', to='sales.downpayment')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated_by', to=settings.AUTH_USER_MODEL)),
                ('invoice', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='down_payment_usages', to='sales.invoice')),
                ('sales_order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='down_payment_usages', to='sales.salesorder')),
            ],
            options={
                'verbose_name': 'Down Payment Usage',
                'verbose_name_plural': 'Down Payment Usages',
                'db_table': 'sales_down_payment_usages',
                'ordering': ['-usage_date'],
            },
        ),
        migrations.CreateModel(
            name='WholesalerDiscount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Wholesaler discount name', max_length=255)),
                ('discount_percentage', models.DecimalField(decimal_places=2, help_text='Flat discount percentage for this customer group', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('minimum_order_amount', models.DecimalField(decimal_places=2, default=0.0, help_text='Minimum order amount to qualify for wholesaler discount', max_digits=15)),
                ('minimum_order_quantity', models.DecimalField(decimal_places=2, default=1.0, help_text='Minimum total quantity to qualify for wholesaler discount', max_digits=10)),
                ('start_date', models.DateField(help_text='Discount start date')),
                ('end_date', models.DateField(help_text='Discount end date')),
                ('is_active', models.BooleanField(default=True)),
                ('priority', models.IntegerField(default=1, help_text='Priority for discount calculation (1=highest)')),
                ('applicable_products', models.ManyToManyField(blank=True, help_text='Leave empty to apply to all products', to='inventory.product')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('customer_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wholesaler_discounts', to='sales.customergroup')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Wholesaler Discount',
                'verbose_name_plural': 'Wholesaler Discounts',
                'db_table': 'sales_wholesaler_discounts',
                'ordering': ['priority', 'customer_group'],
            },
        ),
        migrations.CreateModel(
            name='SalesOrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='Unit price in IDR', max_digits=15)),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=0.0, help_text='Item discount percentage', max_digits=5)),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0.0, help_text='Item discount amount in IDR', max_digits=15)),
                ('line_total', models.DecimalField(decimal_places=2, help_text='Line total in IDR', max_digits=15)),
                ('notes', models.TextField(blank=True, help_text='Item notes', null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='inventory.product')),
                ('sales_order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='sales.salesorder')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Sales Order Item',
                'verbose_name_plural': 'Sales Order Items',
                'db_table': 'sales_order_items',
                'unique_together': {('sales_order', 'product')},
            },
        ),
    ]
